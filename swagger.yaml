openapi: 3.0.0
info:
  title: Hotel Booking API
  version: 1.0.0
  description: API documentation for a hotel booking system.

servers:
  - url: https://hotel-app-management.onrender.com/api/v1
    description: Production server (Render)
  - url: http://localhost:5000/api/v1
    description: Local development server


paths:
  /auth/create-user:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - email
                - password
              properties:
                userName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                # isAdmin:
                #   type: boolean
                # adminKey:
                #   type: string
      responses:
        '201':
          description: User registered successfully

  /auth/resend-user-otp:
    post:
      summary: Resend OTP to user's email
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: OTP resent successfully

  /auth/verify-user-registration:
    patch:
      summary: Verify user registration with OTP
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                  format: email
                code:
                  type: string
      responses:
        '200':
          description: User verified successfully

  /auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful

  /auth/login/admin:
    post:
      summary: Admin login
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Admin login successful

  /hotels/create-hotels:
    post:
      summary: Add a new hotel (Admin only)
      tags: [Hotels]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - location
              properties:
                hotelName:
                  type: string
                title:
                  type: string
                address:
                  type: string
                city:
                  type: string
                desc:
                  type: string
                cheapestRooms:
                  type: number
                rating:
                  type: number
                  min: 0
                  max: 5
                distance:
                  type: string

      responses:
        '201':
          description: Hotel created

  /hotels:
    get:
      summary: Get all hotels
      tags: [Hotels]
      responses:
        '200':
          description: A list of hotels

  /hotels/{hotelId}:
    get:
      summary: Get a specific hotel
      tags: [Hotels]
      parameters:
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hotel data

  /hotels/update-hotels/{hotelId}:
    put:
      summary: Update a hotel (Admin only)
      tags: [Hotels]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
      responses:
        '200':
          description: Hotel updated

  /hotels/delete-hotel/{hotelId}:
    delete:
      summary: Delete a hotel (Admin only)
      tags: [Hotels]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hotel deleted

  /hotels/room/{hotelId}:
    get:
      summary: Get all rooms for a hotel
      tags: [Hotels]
      parameters:
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rooms retrieved

  /rooms/create-room/{hotelId}:
    post:
      summary: Create a room in a hotel (Admin only)
      tags: [Rooms]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - price
                - maxPeople
                - desc
                - roomNumber
              properties:
                title:
                  type: string
                price:
                  type: number
                maxPeople:
                  type: number
                desc:
                  type: string
                roomNumber:
                  type: number
                
      responses:
        '201':
          description: Room created

  /rooms:
    get:
      summary: Get all rooms
      tags: [Rooms]
      responses:
        '200':
          description: Rooms retrieved

  /rooms/{roomId}:
    get:
      summary: Get a specific room
      tags: [Rooms]
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room retrieved

  /rooms/book-room:
    post:
       summary: Book a room
       tags: [Rooms]
       requestBody:
         required: true
         content: 
            application/json:
              schema:
                type: object
                required:
                  - userId
                  - roomId
                  - roomNumber
                  - startDate
                  - endDate
                properties:
                  userId:
                    type: string
                    example: "60f6f9f5b9f1a2a0c8d8e8e8"
                  roomId:
                    type: string
                    example: "60f6f9f5b9f1a2a0c8d8e8e9"
                  roomNumber:
                    type: integer
                    example: 101
                  startDate:
                    type: string
                    format: date-time
                    example: "2025-06-01"
                  endDate:
                    type: string
                    format: date-time
                    example: "2025-06-05"
              responses:
                '200':
                  description: Room booked successfully
                '400':
                  description: Bad request (e.g., already booked or unavailable dates)
                '404':
                  description: Room or room number not found
                '500':
                  description: Internal server error

  /rooms/update-room/{roomId}:
    put:
      summary: Update a room (Admin only)
      tags: [Rooms]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                price:
                  type: number
                maxPeople:
                  type: number
                desc:
                  type: string
                roomNumber:
                  type: number
      responses:
        '200':
          description: Room updated

  /rooms/delete-room/{roomId}/{hotelId}:
    delete:
      summary: Delete a room (Admin only)
      tags: [Rooms]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: string
        - in: path
          name: hotelId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room deleted

  /rooms/availability/{roomNumberId}:
    put:
      summary: Update room availability
      tags: [Rooms]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomNumberId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                available:
                  type: boolean
      responses:
        '200':
          description: Room availability updated

  /user/:
    get:
      summary: Get all users (Admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved

  /user/{userId}:
    get:
      summary: Get a specific user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved

  /user/update-user/{userId}:
    put:
      summary: Update a user (Authenticated)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User updated

  /user/delete-user/{userId}:
    delete:
      summary: Delete a user (Admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
